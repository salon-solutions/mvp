// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator kysely {
  provider     = "prisma-kysely"
  output       = "../src/db"
  fileName     = "types.ts"
  enumFileName = "enums.ts"
}

model Account {
  id                String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name          String
  email         String         @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  salons        Salon[]        @relation("OwnerSalons")
  professionals Professional[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model VerificationToken {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Salon {
  id            String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name          String
  slug          String   @unique
  ownerId       String   @db.Uuid
  owner         User     @relation("OwnerSalons", fields: [ownerId], references: [id])
  address       String
  whatsapp      String?
  businessHours Json // { monday: {...}, tuesday: {...}, ... }
  logoUrl       String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  professionals Professional[]
  services      Service[]
  appointments  Appointment[]
  clients       Client[]
}

model Professional {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId    String   @db.Uuid
  salonId   String   @db.Uuid
  name      String
  photoUrl  String
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user         User          @relation(fields: [userId], references: [id])
  salon        Salon         @relation(fields: [salonId], references: [id])
  services     Service[]
  appointments Appointment[]
}

model Service {
  id             String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  salonId        String   @db.Uuid
  professionalId String?  @db.Uuid
  name           String
  duration       Int // minutes
  price          Int // cents
  active         Boolean  @default(true)
  createdAt      DateTime @default(now())

  salon        Salon         @relation(fields: [salonId], references: [id])
  professional Professional? @relation(fields: [professionalId], references: [id])
  appointments Appointment[]
}

enum AppointmentStatus {
  pending
  confirmed
  cancelled
  done
  no_show
}

model Appointment {
  id             String            @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  salonId        String            @db.Uuid
  professionalId String            @db.Uuid
  serviceId      String            @db.Uuid
  clientName     String
  clientPhone    String
  clientEmail    String?
  date           DateTime // date of appointment
  startTime      String // "HH:mm"
  endTime        String // "HH:mm"
  status         AppointmentStatus @default(pending)
  notes          String?
  createdAt      DateTime          @default(now())

  salon         Salon          @relation(fields: [salonId], references: [id])
  professional  Professional   @relation(fields: [professionalId], references: [id])
  service       Service        @relation(fields: [serviceId], references: [id])
  notifications Notification[]
}

model Client {
  id                String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  salonId           String    @db.Uuid
  name              String
  phone             String
  email             String?
  birthday          DateTime?
  totalAppointments Int       @default(0)
  lastAppointment   DateTime?
  createdAt         DateTime  @default(now())

  salon Salon @relation(fields: [salonId], references: [id])
}

enum NotificationType {
  whatsapp
  email
  sms
}

enum NotificationStatus {
  queued
  sent
  failed
}

model Notification {
  id            String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  appointmentId String             @db.Uuid
  type          NotificationType
  status        NotificationStatus
  scheduledAt   DateTime
  sentAt        DateTime?
  createdAt     DateTime           @default(now())

  appointment Appointment @relation(fields: [appointmentId], references: [id])
}
